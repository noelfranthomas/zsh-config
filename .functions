# ~/.functions

export SPECIAL_GP=~/Documents/GitHub
export SPECIAL_ZSH_CONFIG_PATH=~/Documents/GitHub/zsh-config

# Function
# updates .zshrc, .functions, and .llm-functions. Please read .functions file for proper usage.
uzsh() {
  cp -f $SPECIAL_GP/zsh-config/.zshrc $HOME
  cp -f $SPECIAL_GP/zsh-config/.functions $HOME
  cp -f $SPECIAL_GP/zsh-config/.llm-functions $HOME
}

# Function
# open the zsh-config files in the default editor.
wzsh() {
  "$EDITOR" $SPECIAL_ZSH_CONFIG_PATH
}

# Function
# check if a website is up
checksite() {
  curl -Is "$1" | head -n 1
}

# Function
# find process name and PID by port
portpid() {
  if [ -z "$1" ]; then
    echo "Usage: portpid <port>"
    return 1
  fi

  lsof -i :"$1" | awk 'NR>1 {print "Process Name: "$1, "PID: "$2}'
}

# Function
# generate a random password
genpass() {
  length="${1:-16}"
  if ! [[ "$length" =~ ^[0-9]+$ ]]; then
    echo "Invalid length specified. Please provide a numerical value."
    return 1
  fi
  LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c "$length" ; echo ''
}

# Function
# list all functions and descriptions, and optional definition
help() {
    if [[ -z "$1" ]]; then
        # Show the intro information if no argument is provided
        echo
        echo "This is a zsh config designed to reduce friction during everyday use."
        echo "Author: @noelfranthomas"
        echo

        echo "PARAMS: "

        if [[ $(setopt) == *autocd* ]]; then
            echo "\tautocd: \e[32menabled\e[0m"
        else
            echo "\tautocd: \e[31mdisabled\e[0m"
        fi

        if [[ $(setopt) == *correct* ]]; then
            echo "\tspellcheck: \e[32menabled\e[0m"
        else
            echo "\tspellcheck: \e[31mdisabled\e[0m"
        fi

        if [[ $CLICOLOR == 1 ]]; then
            echo "\tCLICOLOR: \e[32menabled\e[0m"
        else
            echo "\tCLICOLOR: \e[31mdisabled\e[0m"
        fi

        echo "\tEDITOR: \e[32m$EDITOR\e[0m"

        if [[ $LLM_AVAILABLE == 1 ]]; then
            echo "\tLLM_AVAILABLE: \e[32menabled\e[0m"
        else
            echo "\tLLM_AVAILABLE: $LLM_AVAILABLE"
        fi

        echo
        echo "Here is a list of functions that have been added to the config:"
        echo
    fi

    awk -v show_def="$1" '
    BEGIN { found = 0 }  # Initialize a flag to indicate if we matched the function

    /^# Function/ {
        desc=""; func_def=""; getline;

        while ($0 ~ /^# /) {
            sub(/^# /, "", $0); desc = desc $0 " "; getline;
        }

        func_name=$1;
        sub(/\(\)$/, "", func_name);  # Remove () if present

        if (show_def == func_name) { found = 1 }  # Set found if function name matches argument

        if (show_def == func_name) {
            while ($0 !~ /^\}$/ && $0 !~ /^# Function/) {
                func_def = func_def $0 "\n"; getline;
            }
            if ($0 ~ /^\}$/) {
                func_def = func_def $0;  # Append the final line with the closing brace
            }
        }

        if (show_def == "" && show_def != func_name) {
            printf "\033[1;34m%-16s\033[0m - %s\n", func_name, desc;
        }

        if (show_def == func_name) {
            printf "\n";
            printf "\033[1;34m%s\033[0m - %s\n", func_name, desc;
            printf "\n";
            printf "\033[2m%s\033[0m\n", func_def;
        }
    }

    END {
        if (show_def != "" && found == 0) {
            print "\nFunction \033[1;34m" show_def "\033[0m not found."
        }
    }
    ' ~/.functions

    echo
}

# Function
# ls -lah
ll() {
  ls -lah
}

# Function
# go up multiple directories
up() {
  local d=""
  local limit="$1"
  for ((i=1 ; i <= limit ; i++)); do
    d="../$d"
  done
  cd "$d"
}

# Function
# go to the GitHub dir
jkl() {
  cd $SPECIAL_GP
}

# Function
# git add shortcut
ga() {
  local path="${1:-.}"
  git add "$path"
}

# Function
# git status shortcut
gs() {
  git status
}

# Function
# git pull shortcut
gp() {
  git pull
}

# Function
# fetch all remote branches and create corresponding local branches
gb() {
  # fetch all remote branches
  git fetch --all --prune

  # track all remote branches locally
  for branch in $(git branch -r | grep -v '\->'); do
    git branch --track "${branch##*/}" "$branch" 2>/dev/null || true
  done

  # delete local branches that no longer exist on the remote
  for local_branch in $(git branch --format='%(refname:short)'); do
    if ! git show-ref --verify --quiet "refs/remotes/origin/$local_branch"; then
      echo "Deleting local branch $local_branch (no longer on remote)"
      git branch -d "$local_branch" 2>/dev/null || git branch -D "$local_branch"
    fi
  done
}

# Function
# git add, commit, and push
gacp() {
  git add .
  git commit -m "$1"
  git push
}

# Function
# make directory and switch in
mkcd() {
  mkdir -p "$1"
  cd "$1"
}

# Function
# start an ubuntu container in interactive mode
ubuntud() {
  if [ -n "$1" ]; then
    docker run -e TZ=America/Denver -e DEBIAN_FRONTEND=noninteractive -w /app -it --rm \
    -e INSIDE_CONTAINER=true \
    -v "$HOME/.zshrc":/root/.zshrc \
    -v "$HOME/.functions":/root/.functions \
    -v "$1":/app \
    ubuntu:noble sh -c '
      echo "Starting your development container with zsh shell and pkgx on Ubuntu Noble..."
      apt update && apt install -y zsh software-properties-common git curl fish neovim ripgrep build-essential ca-certificates libstdc++6
      curl -fsSL https://pkgx.sh | sh
      zsh
    '
  else
    docker run -e TZ=America/Denver -e DEBIAN_FRONTEND=noninteractive -w /root -it --rm \
    -e INSIDE_CONTAINER=true \
    -v "$HOME/.zshrc":/root/.zshrc \
    -v "$HOME/.functions":/root/.functions \
    ubuntu:noble sh -c '
      echo "Starting your development container with zsh shell and pkgx on Ubuntu Noble..."
      apt update && apt install -y zsh software-properties-common git curl fish neovim ripgrep build-essential ca-certificates libstdc++6
      curl -fsSL https://pkgx.sh | sh
      zsh
    '
  fi
}

# Function
# activate or create a virtual environment
venv() {
    BLUE="\033[1;34m"
    GREEN="\033[1;32m"
    RESET="\033[0m"

    if [[ -d ".venv" ]]; then
        echo -e "${BLUE}Activating virtual environment...${RESET}"
        source .venv/bin/activate
    else
        echo "No virtual environment found."
        read -q "REPLY?Would you like to create one? (y/n) "
        echo  # move to a new line after read -q
        if [[ "$REPLY" == "y" ]]; then
            echo "Creating virtual environment..."
            pkgx python@3.11 -m venv .venv
            echo -e "${GREEN}Virtual environment created.${RESET}"
            echo -e "${BLUE}Activating virtual environment...${RESET}"
            source .venv/bin/activate
        fi
    fi
}

# Function
# kubectl get <arg1>
kg() {
    kubectl get "$1"
}

# Function
# kubectl logs <arg1>
kl() {
    kubectl logs "$1"
}

# Function
# kubectl describe <arg1> <arg2>
kd() {
    kubectl describe "$1" "$2"
}
