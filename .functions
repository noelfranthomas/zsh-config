# ~/.functions

export SPECIAL_GP=~/Documents/GitHub

# Function
# updates .zshrc, .functions, and .llm-functions. Please read .functions file for proper usage.
update-zsh() {
  cp -f $SPECIAL_GP/zsh-config/.zshrc $HOME
  cp -f $SPECIAL_GP/zsh-config/.functions $HOME
  cp -f $SPECIAL_GP/zsh-config/.llm-functions $HOME
}

# Function
# check if a website is up
checksite() {
  curl -Is "$1" | head -n 1
}

# Function
# find process name and PID by port
portpid() {
  if [ -z "$1" ]; then
    echo "Usage: portpid <port>"
    return 1
  fi

  lsof -i :"$1" | awk 'NR>1 {print "Process Name: "$1, "PID: "$2}'
}

# Function
# generate a random password
genpass() {
  length="${1:-16}"
  if ! [[ "$length" =~ ^[0-9]+$ ]]; then
    echo "Invalid length specified. Please provide a numerical value."
    return 1
  fi
  LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c "$length" ; echo ''
}

# Function
# list all functions and descriptions defined in ~/.functions
help() {
    echo
    echo "This is a zsh config designed to reduce friction during everyday use."
    echo "Author: @noelfranthomas"
    echo

    echo "PARAMS: "

    if [[ $(setopt) == *autocd* ]]; then
        echo "\tautocd: \e[32menabled\e[0m"
    else
        echo "\tautocd: \e[31mdisabled\e[0m"
    fi

    if [[ $(setopt) == *correct* ]]; then
        echo "\tspellcheck: \e[32menabled\e[0m"
    else
        echo "\tspellcheck: \e[31mdisabled\e[0m"
    fi

    if [[ $CLICOLOR == 1 ]]; then
        echo "\tCLICOLOR: \e[32menabled\e[0m"
    else
        echo "\tCLICOLOR: \e[31mdisabled\e[0m"
    fi

    echo "\tEDITOR: \e[32m$EDITOR\e[0m"

    if [[ $LLM_AVAILABLE == 1 ]]; then
        echo "\tLLM_AVAILABLE: \e[32menabled\e[0m"
    else
        echo "\tLLM_AVAILABLE: $LLM_AVAILABLE"
    fi

    echo
    echo "Here is a list of functions that have been added to the config:"
    echo

    awk '
    /^# Function/ { desc=""; getline; while ($0 ~ /^# /) { sub(/^# /, "", $0); desc = desc $0 " "; getline; }; func_name=$1; printf "%-16s - %s\n", func_name, desc}' ~/.functions

    echo
}

# Function
# ls -lah
ll() {
  ls -lah
}

# Function
# go up multiple directories
up() {
  local d=""
  local limit="$1"
  for ((i=1 ; i <= limit ; i++)); do
    d="../$d"
  done
  cd "$d"
}

# Function
# go to the GitHub dir
jkl() {
  cd $SPECIAL_GP
}

# Function
# git add shortcut
ga() {
  git add .
}

# Function
# git status shortcut
gs() {
  git status
}

# Function
# git pull shortcut
gp() {
  git pull
}

# Function
# fetch all remote branches and create corresponding local branches
gb() {
  git fetch --all
  for branch in $(git branch -r | grep -v '\->'); do
    git branch --track "${branch##*/}" "$branch" 2>/dev/null || true
  done
}

# Function
# git add, commit, and push
gacp() {
  git add .
  git commit -m "$1"
  git push
}

# Function
# make directory and switch in
mkcd() {
  mkdir -p "$1"
  cd "$1"
}

# Function
# start an ubuntu container in interactive mode
ubuntud() {
  if [ -n "$1" ]; then
    docker run -e TZ=America/Denver -e DEBIAN_FRONTEND=noninteractive -w /app -it --rm -v "$1":/app ubuntu:noble sh -c '
      echo "Starting your development container with Fish shell and pkgx on Ubuntu Noble..."
      apt update && apt install -y software-properties-common git curl fish neovim ripgrep build-essential ca-certificates libstdc++6
      add-apt-repository -y ppa:deadsnakes/ppa && apt update && apt install -y python3.11 python3.11-venv
      curl -fsSL https://pkgx.sh | sh
      eval "$(pkgx integrate)"
      bash
    '
  else
    docker run -e TZ=America/Denver -e DEBIAN_FRONTEND=noninteractive -w /root -it --rm ubuntu:noble sh -c '
      echo "Starting your development container with Fish shell and pkgx on Ubuntu Noble..."
      apt update && apt install -y software-properties-common git curl fish neovim ripgrep build-essential ca-certificates libstdc++6
      add-apt-repository -y ppa:deadsnakes/ppa && apt update && apt install -y python3.11 python3.11-venv
      curl -fsSL https://pkgx.sh | sh
      eval "$(pkgx integrate)"
      bash
    '
  fi
}

# Function
# activate or create a virtual environment
venv() {
    BLUE="\033[1;34m"
    GREEN="\033[1;32m"
    RESET="\033[0m"

    if [[ -d ".venv" ]]; then
        echo -e "${BLUE}Activating virtual environment...${RESET}"
        source .venv/bin/activate
    else
        echo "No virtual environment found."
        read -q "REPLY?Would you like to create one? (y/n) "
        echo  # move to a new line after read -q
        if [[ "$REPLY" == "y" ]]; then
            echo "Creating virtual environment..."
            pkgx python@3.11 -m venv .venv
            echo -e "${GREEN}Virtual environment created.${RESET}"
            echo -e "${BLUE}Activating virtual environment...${RESET}"
            source .venv/bin/activate
        fi
    fi
}
